visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,0,2),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,0,2),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,0,2),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,0,2),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,0,2),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,0,2),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,0,2),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,0,2),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,0,2),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,0,2),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,0,2),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,0,2),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,1,2),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,1,2),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,1,1),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,1,1),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,1,1),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,1,1),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,1,1),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
xvar
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,6,0.25) + rnorm(20,1,1),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
xvar
6 /2.25
6  - 2.25
3.75 / 0.25
library(ggplot2)
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = seq(2.25,7,0.25) + rnorm(20,1,1),
yvar = seq(0.05,0.5,0.025) + rnorm(20,0.4,0.2))
# ggplot(dat, aes(x=xvar, y=yvar)) + geom_point(shape=1)
sp = ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1) +
geom_smooth(method=lm) + geom_point()
sp + xlab("visual coherence") +
ylab("facilitation effect") +
labs(title="Expected rough coorelation between
visual coherence and the magnitude of the facilitation effect")
library(set)
library(sets)
download.packages(sets)
download.packages("sets")
download.packages
download.packages()
download.packages()
? download.packages()
install.packages(sets)
install.packages("sets")
Omega = set("a", "b", "c")
library(sets)
Omega = set("a", "b", "c")
2^Omega
3^Omega
2^Omega
length(2^Omega)
Omega = set("a", "b", "c", "d")
length(2^Omega)
Omega = set("a", "b", "c", "d", "e")
length(2^Omega)
5 * 4 * 3 * 2
factorial(5)
installed.packages
installed.packages()
library("ggplot2")
library(ggplot2)
x = seq(-2,2, sep = 0.1)
? seq
x = seq(-2,2, by = 0.1)
rm(list = ls())
x = seq(-2,2, by = 0.1)
y = 1 / ( 1 + exp(-x))
plot(x,y)
geom_line()
? geom_line
a = geom_line(x,y)
a
a = ggplot(aes(x,y))
D = data.frame(x = c(-1, 0, 1, 2, 3, 4), y = c(0, 1/8,
3/8, 3/8, 1/8, 0))
qplot(x, y, data = D, xlab = "$x$", ylab = "$p_X(x)$") +
geom_linerange(aes(x = x, ymin = 0, ymax = y))
library(ggplot2)
D = data.frame(x = c(-1, 0, 1, 2, 3, 4), y = c(0, 1/8,
3/8, 3/8, 1/8, 0))
qplot(x, y, data = D, xlab = "$x$", ylab = "$p_X(x)$") +
geom_linerange(aes(x = x, ymin = 0, ymax = y))
x = seq(-0.5, 1.5, length = 100)
y = x^2
y[x < 0] = 0
y[x > 1] = 1
z = 2 * x
z[x < 0] = 0
z[x > 1] = 0
D = stack(list(`$f_R(r)$` = z, `$F_R(r)$` = y))
names(D) = c("probability", "Function")
D$x = x
qplot(x, y = probability, geom = "line", xlab = "$r$",
ylab = "", lty = Function, color = Function, data = D,
size = I(1.5))
x = seq(-6, 6, length.out = 200)
R = data.frame(density = dnorm(x, 0, 1))
R$tdensity = dt(x, 1.5)
R$x = x
P = ggplot(R, aes(x = x, y = density)) + geom_area(fill = I("grey")) +
geom_line(aes(x = x, y = tdensity), xlab = "$x$",
ylab = "$f_X(x)$", lwd = I(2))
P + opts(title = "Gaussian (shaded) and t-distribution (dof=1.5) densities")
source('~/Code/R/chris_tutorial.R', echo=TRUE)
y
source('~/Code/R/chris_tutorial.R', echo=TRUE)
y = sign(rnorm(100))
rm(list = ls());
y = sign(rnorm(100))
t
y
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
x
y
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
m = glm(y ~ x[,1], family = bino)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
x
x[,1]
x[,1:end]
x[,1:100]
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
plot(x[,1],y)
rnorm(100)
rnorm(100^@)
rnorm(100^2)
dim(rnorm(100^2))
dim(x)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
summary(m)
m = glm(y ~ x[,1], family = binomial)
summary(m)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/chris_tutorial.R', echo=TRUE)
source('~/Code/R/overfittingDemo.R', echo=TRUE)
rnorm(3^2)
rnorm(10,2)
# HW10 - 1 - Commercial properties
setwd('/Users/Qihong/Code/github/STAT333_RegressionAnalysis/hw10_code')
rm(list = ls());
library(car);library(perturb)
mydata = read.table('CH06PR18.txt', header = F, col.names = c('rentalRate_Y','age_X1','expenses_X2','vacancy_X3','sqrFootage_X4'))
mydata = data.frame(mydata)
mydata
head(mydata)
summary(mydata)
# scatter
plot(mydata, pch = 16)
# linear model
lm.fit = lm(rentalRate_Y ~ age_X1 + expenses_X2 + vacancy_X3 + sqrFootage_X4, data = mydata)
avPlots(lm.fit, pch = 16)
lm.fit = lm(rentalRate_Y ~ age_X1 + expenses_X2 + vacancy_X3 + sqrFootage_X4, data = mydata)
avPlots(lm.fit, pch = 16)
plot(lm.fit)
par(mfcol = c(2,2))
plot(lm.fit, pch = 16)
par(mfrow = c(2,2))
plot(lm.fit, pch = 16)
? rstandard
Hii = hatvalues(lm.fit)
rstd = rstandard(lm.fit$residuals)
rstandard(lm.fit$residuals)
rstandard(lm.fit)
rsstd = rstandard(lm.fit)
plot(Hii, rsstd, pch = 16)
par(mfrow = c(1,1))
plot(Hii, rsstd, pch = 16)
# studentized residuals
rsstnd = rstandard(lm.fit)
Hii = hatvalues(lm.fit)
par(mfrow = c(1,1))
plot(Hii, rsstnd, pch = 16)
par(mfrow = c(2,2))
plot(lm.fit, pch = 16)
# code for 333 prject
rm(list = ls())
setwd('/Users/Qihong/Code/github/STAT333_OpenAirProject')
library(GGally); library(car); library(plyr); library(leaps);
library(perturb); library(MASS); source('All_reg.R')
# load the data
rawdata = read.csv('data/OpenAir_example_data_long.csv')
mydata = rawdata[complete.cases(rawdata), ]
# switch the response variables to the end of the dataframe
mydata[length(mydata)] = mydata[7]
mydata[7] = NULL
colnames(mydata)[9] = 'pm10'
rm(rawdata) # comment this line if raw data is needed
u = mydata$pm10
std = sd(mydata$pm10)
which(mydata$pm10 > u + 3 * std || mydata$pm10 < u - 3 * std)
ind = which((mydata$pm10 > u + 3 * std) | (mydata$pm10 < u - 3 * std));
u
u = mean(mydata$pm10)
std = sd(mydata$pm10)
ind = which((mydata$pm10 > u + 3 * std) | (mydata$pm10 < u - 3 * std));
length(ind)
mydataR = mydata[-ind]
mydataR = mydata[-ind,]
lm.fit_full = lm(pm10 ~ ws +no2 +o3 +so2 +co, data = mydataR)
plot(lm.fit_full)
u = mean(mydata$pm10)
std = sd(mydata$pm10)
ind = which((mydata$pm10 > u + 2 * std) | (mydata$pm10 < u - 2 * std));
mydataR = mydata[-ind,]
lm.fit_full = lm(pm10 ~ ws +no2 +o3 +so2 +co, data = mydataR)
plot(lm.fit_full)
u = mean(mydata$pm10)
std = sd(mydata$pm10)
ind = which((mydata$pm10 > u + 3 * std) | (mydata$pm10 < u - 3 * std));
mydataR = mydata[-ind,]
lm.fit_full = lm(pm10 ~ ws +no2 +o3 +so2 +co, data = mydataR)
plot(lm.fit_full)
# code for 333 prject
rm(list = ls())
setwd('/Users/Qihong/Code/github/STAT333_OpenAirProject')
library(GGally); library(car); library(plyr); library(leaps);
library(perturb); library(MASS); source('All_reg.R')
# load the data
rawdata = read.csv('data/OpenAir_example_data_long.csv')
################
#PRE-PROCESSING
################
# eliminate rows with missing values (NA)
mydata = rawdata[complete.cases(rawdata), ]
# switch the response variables to the end of the dataframe
mydata[length(mydata)] = mydata[7]
mydata[7] = NULL
colnames(mydata)[9] = 'pm10'
rm(rawdata) # comment this line if raw data is needed
yrInd = c(1, 3312, 9441, 16434, 22296, 29853, 37118)
yrs = c('1998','1999','2000', '2001', '2002', '2003', '2004')
mydata2003 = mydata[yrInd[6]:dim(mydata)[1], ] #2003 after
lm.fit_full = lm(pm10 ~ ws +no2 +o3 +so2 +co, data = mydata2003)
out = All_reg(pm10 ~ ws +no2 +o3 +so2 +co, data = mydata2003, nbest=3, nvmax=5)
out = All_reg(pm10 ~ ws +no2 +o3 +so2 +co, data = mydata2003, nbest=3, nvmax=4)
out = All_reg(pm10 ~ ws +no2 +o3 +so2 +co, data = mydata2003, nbest=3, nvmax=5)
rm(list = ls())
setwd('/Users/Qihong/Code/github/STAT333_OpenAirProject')
library(GGally); library(car); library(plyr); library(leaps);
library(perturb); library(MASS); source('All_reg.R')
# load the data
rawdata = read.csv('data/OpenAir_example_data_long.csv')
################
#PRE-PROCESSING
################
# eliminate rows with missing values (NA)
mydata = rawdata[complete.cases(rawdata), ]
# switch the response variables to the end of the dataframe
mydata[length(mydata)] = mydata[7]
mydata[7] = NULL
colnames(mydata)[9] = 'pm10'
rm(rawdata) # comment this line if raw data is needed
lm.fit_full = lm(pm10 ~ ws +no2 +o3 +so2 +co, data = mydata)
out = All_reg(pm10 ~ ws +no2 +o3 +so2 +co, data = mydata, nbest=3, nvmax=4)
out = All_reg(pm10 ~ ws +no2 +o3 +so2 +co, data = mydata, nbest=3, nvmax=5)
